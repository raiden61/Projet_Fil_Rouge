# Description: This file contains the code for the Flask application.
from flask import Flask, request, jsonify # pip install flask
import mysql.connector # pip install mysql-connector-python
from dotenv import load_dotenv  # Ajout de cette ligne
from classes.userses import Users
import os

load_dotenv()


# Connectez-vous à la base de données
def get_database_cursor():
    conn = mysql.connector.connect(
        host=os.getenv("DB_HOST"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME")
    )
    cursor = conn.cursor()
    return conn, cursor

class users_Controller():
    def user_Method():
        conn, cursor = get_database_cursor()

        if request.method == 'GET':
            try:
                query = "SELECT * FROM users"
                cursor.execute(query)
                rows = cursor.fetchall()

                users = []
                for row in rows:
                    user_temp = Users.from_map({'id': row[0], 'username': row[1], 'password': row[2], 'email': row[3], 'first_name': row[4], 'last_name': row[5]})
                    users.append(user_temp.to_map())

                return jsonify(users), 200
            except Exception as e:
                return jsonify({'error': str(e)}), 500
            finally:
                cursor.close()
                conn.close()

        elif request.method == 'POST':
            try:
                # Get the JSON data sent by the client
                data = request.get_json()

                # Create a new user object from the JSON data
                user = Users.from_map(data)


                # Insert the new user into the database
                query = "INSERT INTO users (username, password, mail, first_name, last_name) VALUES (%s, %s, %s, %s, %s)"
                cursor.execute(query, (user.username, user.password, user.email, user.first_name, user.last_name))
                conn.commit()

                # Return the new user with the id generated by the database
                user.id = cursor.lastrowid
                return jsonify(user.to_map()), 201
            except Exception as e:
                return jsonify({'error': str(e)}), 500
            finally:
                cursor.close()
                conn.close()
        
    
    def user_MethodSpecifique():
        # Create a database connection and cursor
        conn, cursor = get_database_cursor()
